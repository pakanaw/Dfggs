local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()

local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Main Frame

local Window = Fluent:CreateWindow({

Title = "~ CR7 Script ~",

SubTitle = "By / Cr7_Arda",

TabWidth = 160,

Size = UDim2.fromOffset(480, 330),

Acrylic = true,

Theme = "Darker",

MinimizeKey = Enum.KeyCode.LeftControl

})

-- Device Check

local DeviceType = game:GetService("UserInputService").TouchEnabled and "Mobile" or "PC"

-- Mobil Player

if DeviceType == "Mobile" then

local ClickButton = Instance.new("ScreenGui")

local MainFrame = Instance.new("Frame")

local TextButton = Instance.new("TextButton")

local UICorner = Instance.new("UICorner")

ClickButton.Name = "ClickButton"

ClickButton.Parent = game.CoreGui

ClickButton.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

MainFrame.Name = "MainFrame"

MainFrame.Parent = ClickButton

MainFrame.AnchorPoint = Vector2.new(0, 1)

MainFrame.BackgroundTransparency = 0.5

MainFrame.BackgroundColor3 = Color3.fromRGB(38, 38, 38)

MainFrame.BorderSizePixel = 0

MainFrame.Position = UDim2.new(0, 10, 1, -10)

MainFrame.Size = UDim2.new(0, 70, 0, 70)

UICorner.CornerRadius = UDim.new(1, 0)

UICorner.Parent = MainFrame

TextButton.Parent = MainFrame

TextButton.BackgroundColor3 = Color3.new(1, 1, 1)

TextButton.BackgroundTransparency = 1

TextButton.BorderSizePixel = 0

TextButton.Size = UDim2.new(1, 0, 1, 0)

TextButton.AutoButtonColor = false

TextButton.Font = Enum.Font.SourceSans

TextButton.Text = "CR7"

TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)

TextButton.TextSize = 25

TextButton.MouseButton1Click:Connect(function()

game:GetService("VirtualInputManager"):SendKeyEvent(true, "LeftControl", false, game)

game:GetService("VirtualInputManager"):SendKeyEvent(false, "LeftControl", false, game)

end)

end

-- Tabs

local Tabs = {

Main = Window:AddTab({ Title = "Main", Icon = "home" }),

Player = Window:AddTab({ Title = "Player", Icon = "user" }),

Combat = Window:AddTab({ Title = "Combat", Icon = "sword" }),

Teleport = Window:AddTab({ Title = "Teleport", Icon = "map" }),

Aura = Window:AddTab({ Title = "Aura", Icon = "target" }),

Esp = Window:AddTab({ Title = "Esp", Icon = "eye" }),

Gold = Window:AddTab({ Title = "Auto", Icon = "repeat"}),

Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })

}

-- Notify

Fluent:Notify({

Title = "Cr7OnTop!",

Content = "Welcome!",

Duration = 5

})


-- Main Tab

Tabs.Main:AddParagraph({

Title = "Made By",

Content = "Cr7_Arda"

})

Tabs.Main:AddButton({

Title = "Read This!!!",

Callback = function()

Window:Dialog({

Title = "Important",

Content = "If you execute this script multiple times in the same game, it will not function properly.",

Buttons = {

{ Title = "Ok", Callback = function() print("") end }

}

})

end

})

-- Join Discord

Tabs.Main:AddParagraph({

Title = "Join Our CR7 Server",

Content = "https://discord.gg/cr7server"

})

-- Copy Button

Tabs.Main:AddButton({

Title = "Copy Discord Link",

Callback = function()

local textToCopy = "https://discord.gg/cr7server"

if setclipboard then

setclipboard(textToCopy)

print("")

else

warn("")

end

end

})


-- Player Tab

local Speed = 16
local ToggleSpeed = Tabs.Player:AddToggle("FastRunToggle", {Title = "Walk Speed", Default = false })

ToggleSpeed:OnChanged(function()
    if ToggleSpeed.Value then
        -- When toggle is on, set the walk speed to the desired value
        if game.Players.LocalPlayer.Character then
            humanoid = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
            rootPart = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
            game:GetService("RunService").RenderStepped:Connect(function()
                if ToggleSpeed.Value then
                    humanoid.WalkSpeed = Speed
                else
                    humanoid.WalkSpeed = 16
                end
            end)
        end
    else
        if humanoid then
            humanoid.WalkSpeed = 16
        end
    end
end)

local SpeedInput = Tabs.Player:AddInput("SpeedInput", {
    Title = "Set Speed",
    Default = "16",
    Placeholder = "Enter speed",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        Speed = tonumber(Value) or 16
    end
})

game.Players.LocalPlayer.CharacterAdded:Connect(function()
    local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    
    if ToggleSpeed.Value then
        humanoid.WalkSpeed = Speed
    else
        humanoid.WalkSpeed = 16
    end
end)



local Dropdown = Tabs.Player:AddDropdown("Dropdown", {

Title = "Jump Power",

Values = { "Normal Jump", "High Jump", "Sky Jump" },

Multi = false,

Default = 1,

})

Dropdown:SetValue("Normal Jump")

Dropdown:OnChanged(function(Value)

print("")

local player = game.Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()

local humanoid = character:WaitForChild("Humanoid")

if Value == "Normal Jump" then

humanoid.JumpPower = 50

elseif Value == "High Jump" then

humanoid.JumpPower = 200

elseif Value == "Sky Jump" then

humanoid.JumpPower = 400

end

end)



local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local humanoid = character:WaitForChild("Humanoid")
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local flying = false
local speed = 30
local bodyGyro = nil
local bodyVelocity = nil
local joystickActive = false
local isMobile = false

if userInputService.TouchEnabled then
    isMobile = true
end

local function startFlyingPC()
    if flying then return end
    flying = true
    humanoid.PlatformStand = true

    bodyGyro = Instance.new("BodyGyro")
    bodyVelocity = Instance.new("BodyVelocity")

    bodyGyro.MaxTorque = Vector3.new(400000, 400000, 400000)
    bodyGyro.CFrame = character.HumanoidRootPart.CFrame
    bodyGyro.P = 5000

    bodyVelocity.MaxForce = Vector3.new(400000, 400000, 400000)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = character.HumanoidRootPart
    bodyGyro.Parent = character.HumanoidRootPart

    runService.RenderStepped:Connect(function()
        if flying then
            local moveDirection = humanoid.MoveDirection
            local camera = workspace.CurrentCamera
            local cameraLookVector = camera.CFrame.LookVector
            local verticalSpeed = cameraLookVector.Y * speed

            bodyVelocity.Velocity = Vector3.new(
                moveDirection.X * speed,
                verticalSpeed,
                moveDirection.Z * speed)
            bodyGyro.CFrame = workspace.CurrentCamera.CFrame
        end
    end)
end

local function startFlyingMobile()
    if flying then return end
    flying = true
    humanoid.PlatformStand = true

    bodyGyro = Instance.new("BodyGyro")
    bodyVelocity = Instance.new("BodyVelocity")

    bodyGyro.MaxTorque = Vector3.new(400000, 400000, 400000)
    bodyGyro.CFrame = character.HumanoidRootPart.CFrame
    bodyGyro.P = 5000

    bodyVelocity.MaxForce = Vector3.new(400000, 400000, 400000)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = character.HumanoidRootPart
    bodyGyro.Parent = character.HumanoidRootPart

    runService.RenderStepped:Connect(function()
        if flying then
            if joystickActive then
                local moveDirection = humanoid.MoveDirection
                local camera = workspace.CurrentCamera
                local cameraLookVector = camera.CFrame.LookVector
                local verticalSpeed = cameraLookVector.Y * speed

                bodyVelocity.Velocity = Vector3.new(
                    moveDirection.X * speed,
                    verticalSpeed,
                    moveDirection.Z * speed
                )
            else
                bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            end
            bodyGyro.CFrame = workspace.CurrentCamera.CFrame
        end
    end)
end

local function stopFlying()
    if not flying then return end
    flying = false
    if bodyGyro then bodyGyro:Destroy() end
    if bodyVelocity then bodyVelocity:Destroy() end
    humanoid.PlatformStand = false
end

local function toggleFly()
    if flying then
        stopFlying()
    else
        if isMobile then
            startFlyingMobile()
        else
            startFlyingPC()
        end
    end
end

userInputService.InputChanged:Connect(function(input)
    if isMobile then
        if input.UserInputType == Enum.UserInputType.Touch then
            joystickActive = true
        end
    else
        if input.UserInputType == Enum.UserInputType.Keyboard or input.UserInputType == Enum.UserInputType.MouseMovement then
            joystickActive = false
        end
    end
end)

userInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.Gamepad1 then
        joystickActive = false
    end
end)

local Toggle = Tabs.Player:AddToggle("MyToggle", {Title = "Fly Toggle", Default = false})

Toggle:OnChanged(function()
    if Toggle.Value then
        toggleFly()
    else
        stopFlying()
    end
end)

player.CharacterAdded:Connect(function(newCharacter)
    if character and character:FindFirstChild("HumanoidRootPart") then
        stopFlying()
    end

    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")

    if Toggle and Toggle.OnChanged then
        Toggle:OnChanged(function()
            if Toggle.Value then
                toggleFly()
            else
                stopFlying()
            end
        end)
    end
end)




Tabs.Player:AddButton({
    Title = "No Fall Damage",
    Description = "",
    Callback = function()
        local LocalPlayer = game:GetService("Players").LocalPlayer
        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local Humanoid = Character:WaitForChild("Humanoid")

        local isFalling = false

        Humanoid.StateChanged:Connect(function(_, newState)
            if newState == Enum.HumanoidStateType.Freefall then
                isFalling = true
            elseif newState == Enum.HumanoidStateType.Landed and isFalling then
                Character:SetAttribute("inWater", true)
                isFalling = false
            end
        end)

        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local remoteInterface = ReplicatedStorage:FindFirstChild("remoteInterface")

        if remoteInterface then
            local fallDamageEvent = remoteInterface:FindFirstChild("character"):FindFirstChild("fallDamage")
            if fallDamageEvent then
                fallDamageEvent:Destroy()
            end
        end
    end
})


local player = game.Players.LocalPlayer

local function disableStamina(character)
    local stamina = character:FindFirstChild("stamina")
    if stamina then
        stamina:Destroy()
    end
end

local Button = Tabs.Player:AddButton({
    Title = "Inf Stamina",
    Callback = function()
        local character = player.Character or player.CharacterAdded:Wait()
        disableStamina(character)
        player.CharacterAdded:Connect(function(newCharacter)
            disableStamina(newCharacter)
        end)
    end
})


local PickupToggle = Tabs.Player:AddToggle("PickupToggle", { Title =  "Auto Pickup", Default = false })

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local pickupItemRemote = game.ReplicatedStorage:WaitForChild("remoteInterface"):WaitForChild("inventory"):WaitForChild("pickupItem")
local pickupRadius = 30

local humanoidRootPart
local pickupThread

local function getCharacterAndHumanoidRootPart()
    local character = player.Character or player.CharacterAdded:Wait()
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end

local function autoPickup()
    if humanoidRootPart then
        local position = humanoidRootPart.Position
        for _, item in pairs(workspace.droppedItems:GetChildren()) do
            if item:IsA("Part") then
                local distance = (item.Position - position).magnitude
                if distance <= pickupRadius then
                    local args = { item }
                    pickupItemRemote:FireServer(unpack(args))
                end
            end
        end
    end
end

local function startAutoPickup()
    if PickupToggle.Value then
        pickupThread = game:GetService("RunService").Heartbeat:Connect(function()
            autoPickup()
        end)
    end
end

local function stopAutoPickup()
    if pickupThread then
        pickupThread:Disconnect()
        pickupThread = nil
    end
end

PickupToggle:OnChanged(function()
    print("")
    if PickupToggle.Value then
        startAutoPickup()
    else
        stopAutoPickup()
    end
end)

player.CharacterAdded:Connect(function()

    PickupToggle:SetValue(false)

    stopAutoPickup()

    getCharacterAndHumanoidRootPart()

    if PickupToggle.Value then

        startAutoPickup()
    end
end)

getCharacterAndHumanoidRootPart()

if PickupToggle.Value then
    startAutoPickup()
else
    stopAutoPickup()
end

print("")

               

local GhostToggle = Tabs.Player:AddToggle("GhostToggle", { Title = "Wall Hack", Default = false })

local originalCollisions = {}

local wallHackEnabled = false

GhostToggle:OnChanged(function()

wallHackEnabled = GhostToggle.Value

local character = game.Players.LocalPlayer.Character

local humanoid = character and character:FindFirstChild("Humanoid")

if wallHackEnabled then

print("")


for _, v in pairs(workspace:GetDescendants()) do

if v:IsA("BasePart") and not v:IsA("Terrain") and v.Parent ~= game.Players.LocalPlayer.Character then

originalCollisions[v] = v.CanCollide

v.CanCollide = false

end

end

else

print("")

for _, v in pairs(workspace:GetDescendants()) do

if v:IsA("BasePart") and not v:IsA("Terrain") and v.Parent ~= game.Players.LocalPlayer.Character then

if originalCollisions[v] ~= nil then

v.CanCollide = originalCollisions[v]

originalCollisions[v] = nil

end

end

end

end


if humanoid then

humanoid.PlatformStand = false -- Normal hareketi sağlamak için

end

end)




local function enableWorldHazards(character)
    local hazardScript = character:FindFirstChild("worldHazards")
    if hazardScript then
        hazardScript.Disabled = true
    end
end

Tabs.Player:AddButton({
    Title = "Anti Lava",
    Description = "",
    Callback = function()
        local player = game.Players.LocalPlayer
        
        if player.Character then
            enableWorldHazards(player.Character)
        end
        
        player.CharacterAdded:Connect(function(newCharacter)
            task.wait(5)
            enableWorldHazards(newCharacter)
        end)
    end
})



local function startBubbleEffect()
    local player = game.Players.LocalPlayer

    local function setupCharacter(character)
        local head = character:WaitForChild("Head")
        local airBubblesFolder = workspace:WaitForChild("AirBubbles")

        local function isUnderwater()
            local headPosition = head.Position
            local waterLevel = workspace.Terrain.WaterWaveSize
            return headPosition.Y < waterLevel
        end

        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if not character.Parent then
                connection:Disconnect()
                return
            end

            if isUnderwater() then
                for _, bubble in pairs(airBubblesFolder:GetChildren()) do
                    if bubble:IsA("BasePart") then
                        bubble.Position = head.Position + Vector3.new(0, 0.5, 0)
                    end
                end
            end
        end)
    end

    if player.Character then
        setupCharacter(player.Character)
    end

    player.CharacterAdded:Connect(function(newCharacter)
        task.wait(5)
        setupCharacter(newCharacter)
    end)
end

Tabs.Player:AddButton({
    Title = "Auto Air Bubbles",
    Callback = function()
        startBubbleEffect()
        print("")
    end
})


-- Combat Tab

local HeadSize = 12
local IsDisabled = true
local IsTeamCheckEnabled = false
local HitboxEnabled = false

local OriginalHeadSize = HeadSize

local HitboxColor = Color3.fromRGB(250, 250, 250)

local function resetHitbox()
    for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
        if player.Character then
            local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                humanoidRootPart.Size = Vector3.new(2, 2, 1)
                humanoidRootPart.Transparency = 1
                humanoidRootPart.Color = Color3.fromRGB(255, 255, 255)
                humanoidRootPart.Material = Enum.Material.SmoothPlastic
                humanoidRootPart.CanCollide = true
            end
        end
    end
end

local function applyHitboxSettings()
    local localPlayer = game:GetService('Players').LocalPlayer
    for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
        if player ~= localPlayer and player.Character then
            local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                humanoidRootPart.Size = Vector3.new(HeadSize, HeadSize, HeadSize)
                humanoidRootPart.Transparency = 0.3
                humanoidRootPart.Color = HitboxColor
                humanoidRootPart.Material = Enum.Material.Neon
                humanoidRootPart.CanCollide = false
            end
        end
    end
end

game:GetService('RunService').RenderStepped:Connect(function()
    if HitboxEnabled then
        local localPlayer = game:GetService('Players').LocalPlayer
        if not localPlayer or not localPlayer.Character then return end
        local localPlayerTeam = localPlayer.Team 

        for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
            if player ~= localPlayer and (not IsTeamCheckEnabled or player.Team ~= localPlayerTeam) then
                local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    humanoidRootPart.Size = Vector3.new(HeadSize, HeadSize, HeadSize)
                    humanoidRootPart.Transparency = 0.8
                    humanoidRootPart.Color = HitboxColor
                    humanoidRootPart.Material = Enum.Material.Neon
                    humanoidRootPart.CanCollide = false
                end
            end
        end
    else
        resetHitbox()
    end
end)

game:GetService('Players').PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        character:WaitForChild("HumanoidRootPart")
        if HitboxEnabled then
            applyHitboxSettings()
        end
    end)
end)

local Toggle = Tabs.Combat:AddToggle("HitboxToggle", {
    Title = "Hitbox",
    Default = false
})

Toggle:OnChanged(function(State)
    HitboxEnabled = State
    if State then
        print("")
        applyHitboxSettings()
    else
        print("")
        resetHitbox()
    end
end)



local player = game.Players.LocalPlayer
local camera = workspace.CurrentCamera
local range = 10
local CombatEnabled = false

local function initializeCharacter()
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")

    local function lockCameraToTarget(targetCharacter)
        local targetHumanoid = targetCharacter:FindFirstChild("Humanoid")
        if not targetHumanoid then return end
        camera.CameraSubject = targetHumanoid
    end

    local function getNearbyPlayer()
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local otherRootPart = otherPlayer.Character.HumanoidRootPart
                local distance = (rootPart.Position - otherRootPart.Position).Magnitude
                if distance <= range then
                    return otherPlayer.Character
                end
            end
        end
        return nil
    end

    local function teleportInsideTarget(targetCharacter)
        if not CombatEnabled or not player.Character or not targetCharacter or not targetCharacter:FindFirstChild("HumanoidRootPart") then
            return
        end

        local targetRoot = targetCharacter.HumanoidRootPart

        rootPart.CFrame = targetRoot.CFrame
        lockCameraToTarget(targetCharacter)

        task.wait()
    end

    character:WaitForChild("Humanoid").Died:Connect(function()
        camera.CameraSubject = character.Humanoid
        task.wait()
        initializeCharacter()
    end)

    while player.Character and player.Character:FindFirstChild("Humanoid") do
        if CombatEnabled then
            local targetCharacter = getNearbyPlayer()
            if targetCharacter then
                teleportInsideTarget(targetCharacter)
            else
                camera.CameraSubject = character.Humanoid
            end
        else
            camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
        end
        task.wait()
    end
end

local Toggle = Tabs.Combat:AddToggle("CombatToggle", {
    Title = "Inside Tp",
    Default = false
})

Toggle:OnChanged(function(State)
    CombatEnabled = State
    if State then
        initializeCharacter()
    else
        camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
    end
end)


local player = game.Players.LocalPlayer

local camera = workspace.CurrentCamera

local range = 10

local teleportDistance = 18

local CombatEnabled = false

local function initializeCharacter()
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")

    local function lockCameraToTarget(targetCharacter)
        local targetHumanoid = targetCharacter:FindFirstChild("Humanoid")
        if not targetHumanoid then return end
        camera.CameraSubject = targetHumanoid
    end

    local function getNearbyPlayer()
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local otherRootPart = otherPlayer.Character.HumanoidRootPart
                local distance = (rootPart.Position - otherRootPart.Position).Magnitude
                if distance <= range then
                    return otherPlayer.Character
                end
            end
        end
        return nil
    end

    local function teleportUpDown(targetCharacter)
        if not CombatEnabled or not player.Character or not targetCharacter or not targetCharacter:FindFirstChild("HumanoidRootPart") then
            return
        end

        local targetRoot = targetCharacter.HumanoidRootPart
        local upPosition = targetRoot.Position + Vector3.new(0, teleportDistance, 0)
        local downPosition = targetRoot.Position + Vector3.new(0, 2, 0)

        rootPart.CFrame = CFrame.new(upPosition)
        lockCameraToTarget(targetCharacter)
        task.wait(0.1)

        rootPart.CFrame = CFrame.new(downPosition)
        lockCameraToTarget(targetCharacter)
        task.wait(0.2)
    end

    character:WaitForChild("Humanoid").Died:Connect(function()
        camera.CameraSubject = character.Humanoid
        task.wait()
        initializeCharacter()
    end)

    while player.Character and player.Character:FindFirstChild("Humanoid") do
        if CombatEnabled then
            local targetCharacter = getNearbyPlayer()
            if targetCharacter then
                teleportUpDown(targetCharacter)
            else
                camera.CameraSubject = character.Humanoid
            end
        else
            camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
        end
        task.wait()
    end
end

local Toggle = Tabs.Combat:AddToggle("CombatToggle", {
    Title = "UpDown Tp",
    Default = false
})

Toggle:OnChanged(function(State)
    CombatEnabled = State
    if State then
        initializeCharacter()
    else
        camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
    end
end)




local Players = game:GetService("Players")
local VirtualUser = game:GetService("VirtualUser")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local autoClicking = false
local clickDelay = 0.01

local function autoClick()
    while autoClicking do
        local screenSize = workspace.CurrentCamera.ViewportSize
        local clickPosition = Vector2.new(screenSize.X / 2, screenSize.Y / 2)

        local success, errorMsg = pcall(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton1(clickPosition)
        end)

        if not success then
            warn("")
        end

        task.wait(clickDelay)
    end
end

local Toggle = Tabs.Combat:AddToggle("AutoHit", {Title = "Auto Hit", Default = false})

Toggle:OnChanged(function()
    autoClicking = Toggle.Value
    
    if autoClicking then
        task.spawn(autoClick)
    end
end)

Toggle:SetValue(false)



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local maxDistance = 120
local isEnabled = false

local Toggle = Tabs.Combat:AddToggle("AimToggle", {Title = "Auto Aim", Default = false})

Toggle:OnChanged(function(value)
    isEnabled = value
end)

local function getClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge
    local myCharacter = LocalPlayer.Character

    if myCharacter and myCharacter:FindFirstChild("HumanoidRootPart") then
        local myPosition = myCharacter.HumanoidRootPart.Position
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local enemyPosition = player.Character.HumanoidRootPart.Position
                local distance = (myPosition - enemyPosition).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end
    return closestPlayer
end

RunService.RenderStepped:Connect(function()
    if isEnabled then
        local myCharacter = LocalPlayer.Character
        if myCharacter and myCharacter:FindFirstChild("HumanoidRootPart") then
            local headPosition = myCharacter.HumanoidRootPart.Position + Vector3.new(0, 8, 0)
            local targetPlayer = getClosestPlayer()

            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                local distanceToTarget = (headPosition - targetPosition).Magnitude

                if distanceToTarget <= maxDistance then
                    Camera.CFrame = CFrame.new(headPosition, targetPosition)
                else
                    Camera.CameraType = Enum.CameraType.Custom
                end
            else
                Camera.CFrame = CFrame.new(headPosition, headPosition + Camera.CFrame.LookVector)
            end
        end
    end
end)




local function findNearestStructure(playerPosition)

local nearest = nil

local nearestDistance = math.huge

for _, structure in pairs(workspace.placedStructures:GetChildren()) do

if structure:IsA("Model") then

local distance = (playerPosition - structure.PrimaryPart.Position).Magnitude

if distance < nearestDistance then

nearest = structure

nearestDistance = distance

end

end

end

return nearest

end

local function onAutoMakeDsArmorButtonClick()

local player = game.Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()

local playerPosition = character.HumanoidRootPart.Position

local nearestStructure = findNearestStructure(playerPosition)

if not nearestStructure then

warn("")

return

end

local argsPlaceForge = {

[1] = 269,

[2] = CFrame.new(playerPosition.X, playerPosition.Y - 3, playerPosition.Z) * CFrame.Angles(0, 0, 0),

[3] = -2.356194490192345

}

game:GetService("ReplicatedStorage").remoteInterface.interactions.build:InvokeServer(unpack(argsPlaceForge))

local forge = nil

for _, structure in pairs(workspace.placedStructures:GetChildren()) do

if structure:FindFirstChild("Darksteel Forge") then

forge = structure:FindFirstChild("Darksteel Forge")

break

end

end

if not forge then

warn("")

return

end

local argsSword = {

[1] = 267,

[2] = forge,

[3] = 1,

[4] = 0

}

game:GetService("ReplicatedStorage").remoteInterface.interactions.craft:InvokeServer(unpack(argsSword))

local argsChest = {

[1] = 261,

[2] = forge,

[3] = 1,

[4] = 0

}

game:GetService("ReplicatedStorage").remoteInterface.interactions.craft:InvokeServer(unpack(argsChest))

local argsPants = {

[1] = 260,

[2] = forge,

[3] = 1,

[4] = 0

}

game:GetService("ReplicatedStorage").remoteInterface.interactions.craft:InvokeServer(unpack(argsPants))

local argsHelmet = {

[1] = 262,

[2] = forge,

[3] = 1,

[4] = 0

}

game:GetService("ReplicatedStorage").remoteInterface.interactions.craft:InvokeServer(unpack(argsHelmet))

local argsEquipSword = {

[1] = "inventory",

[2] = 1,

[3] = 267

}

game:GetService("ReplicatedStorage").remoteInterface.inventory.equipHotbar:InvokeServer(unpack(argsEquipSword))

local argsWearHelmet = {

[1] = "inventory",

[2] = 1,

[3] = 262

}

game:GetService("ReplicatedStorage").remoteInterface.inventory.equipClothing:InvokeServer(unpack(argsWearHelmet))

local argsWearChest = {

[1] = "inventory",

[2] = 2,

[3] = 261

}

game:GetService("ReplicatedStorage").remoteInterface.inventory.equipClothing:InvokeServer(unpack(argsWearChest))

local argsWearPants = {

[1] = "inventory",

[2] = 3,

[3] = 260

}

game:GetService("ReplicatedStorage").remoteInterface.inventory.equipClothing:InvokeServer(unpack(argsWearPants))

if forge then

game:GetService("ReplicatedStorage").remoteInterface.interactions.deleteStructure:FireServer(forge)

end

end

local AutoMakeDsArmorButton = Tabs.Combat:AddButton({

Title = "Auto Make Ds Armor",

Callback = function()

print("")

onAutoMakeDsArmorButtonClick()

end

})

local AutoMakeBsArmorButton = Tabs.Combat:AddButton({

Title = "Auto Make Bs Armor",

Callback = function()

print("")


local player = game.Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()

local playerPosition = character.HumanoidRootPart.Position

local argsPlaceFurnace = {

[1] = 199,

[2] = CFrame.new(playerPosition.X, playerPosition.Y - 3, playerPosition.Z) * CFrame.Angles(0, 0, 0),

[3] = -3.141592653589793

}

game:GetService("ReplicatedStorage").remoteInterface.interactions.build:InvokeServer(unpack(argsPlaceFurnace))

local furnace = nil

for _, structure in pairs(workspace.placedStructures:GetChildren()) do

if structure:FindFirstChild("Bluesteel Furnace") then

furnace = structure:FindFirstChild("Bluesteel Furnace")

break

end

end

if not furnace then

warn("")

return

end


local itemsToCraft = {

{197, "Bluesteel Sword"},

{201, "Bluesteel Chestplate"},

{202, "Bluesteel Pants"},

{200, "Bluesteel Helmet"}

}

for _, item in ipairs(itemsToCraft) do

local argsCraft = {

[1] = item[1],

[2] = furnace,

[3] = 1,

[4] = 0

}

game:GetService("ReplicatedStorage").remoteInterface.interactions.craft:InvokeServer(unpack(argsCraft))

end


local itemsToEquip = {

{197, "inventory", 1, "equipHotbar"},

{200, "inventory", 1, "equipClothing"},

{201, "inventory", 2, "equipClothing"},

{202, "inventory", 3, "equipClothing"}

}


for _, equip in ipairs(itemsToEquip) do

local argsEquip = {

equip[2],

equip[3],

equip[1]

}

game:GetService("ReplicatedStorage").remoteInterface.inventory[equip[4]]:InvokeServer(unpack(argsEquip))

end

game:GetService("ReplicatedStorage").remoteInterface.interactions.deleteStructure:FireServer(furnace)

print("")

end

})




-- Teleport Tab

local player = game.Players.LocalPlayer
local savedName = ""

local Input = Tabs.Teleport:AddInput("Input", {
    Title = "Player Name :",
    Default = "",
    Placeholder = "                       ...",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        savedName = Value
    end
})

Tabs.Teleport:AddButton({
    Title = "Player Tp",
    Callback = function()
        if savedName == "" then
            Fluent:Notify({
                Title = "?",
                Content = "",
                Duration = 5
            })
            return
        end

        local matchedPlayers = {}

        for _, targetPlayer in ipairs(game.Players:GetPlayers()) do
            if targetPlayer ~= player and (targetPlayer.Name:lower():sub(1, #savedName) == savedName:lower() or targetPlayer.DisplayName:lower():sub(1, #savedName) == savedName:lower()) then
                table.insert(matchedPlayers, targetPlayer)
            end
        end

        if #matchedPlayers == 0 then
            Fluent:Notify({
                Title = "Tp Error",
                Content = "Player not found.",
                Duration = 5
            })
            return
        elseif #matchedPlayers > 1 then
            Fluent:Notify({
                Title = "Tp Error",
                Content = "There is more than one player with the same name.",
                Duration = 5
            })
            return
        end

        local targetCharacter = matchedPlayers[1].Character

        if not targetCharacter or not targetCharacter:FindFirstChild("Humanoid") or targetCharacter:FindFirstChild("Humanoid").Health <= 0 then
            Fluent:Notify({
                Title = "Tp Error",
                Content = "Player Dead",
                Duration = 5
            })
            return
        end

        if targetCharacter:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = targetCharacter.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
        end
    end
})





local players = game:GetService("Players")

local localPlayer = players.LocalPlayer

local runService = game:GetService("RunService")

local originalY = nil

local boatCFrame = nil

local kwconnections = getgenv().kwconnections or {}

local function getHumanoid(plr)

plr = plr or localPlayer

if plr.Character then

return plr.Character:FindFirstChild("Humanoid")

end

return nil

end

local function getCurrentBoat()

local humanoid = getHumanoid(localPlayer)

if humanoid and humanoid.SeatPart then

local folder = humanoid.SeatPart:FindFirstAncestorOfClass("Folder")

if folder and folder == workspace.boats then

return humanoid.SeatPart:FindFirstAncestorOfClass("Model")

end

end

end


local function enableBoatSpeed()

if kwconnections["boat_hover"] then

kwconnections["boat_hover"]:Disconnect()

kwconnections["boat_hover"] = nil

end

originalY = nil

boatCFrame = nil

kwconnections["boat_hover"] =

runService.Stepped:Connect(

function()

local humanoid = getHumanoid(localPlayer)

local boat = getCurrentBoat()

if not boat or not humanoid then

originalY = nil

boatCFrame = nil

return

end

if not boatCFrame then

boatCFrame = boat:GetPivot()

end

if not originalY then

originalY = boatCFrame.Position.Y

print("Original Y:", originalY)

end

for _, v in pairs(boat:GetDescendants()) do

if v:IsA("Part") or v:IsA("MeshPart") or v:IsA("Union") then

v.Velocity = Vector3.new(0, 0, 0)

end

end

boat:PivotTo(boatCFrame)

local extraY = 0

if humanoid.Parent:GetAttribute("inTerrain") then

extraY = 0

else

extraY = 0

boatCFrame =

boatCFrame - Vector3.new(0, boatCFrame.Position.Y - originalY, 0)

end

boatCFrame = boatCFrame + Vector3.new(0, extraY, 0) + humanoid.MoveDirection * 0.4

end

)

end


local function disableBoatSpeed()

if kwconnections["boat_hover"] then

kwconnections["boat_hover"]:Disconnect()

kwconnections["boat_hover"] = nil

end

end


local BoatToggle = Tabs.Teleport:AddToggle("BoatToggle", { Title = "Boat Speed", Default = false })

BoatToggle:OnChanged(function()

print("")

if BoatToggle.Value then

enableBoatSpeed()

else

disableBoatSpeed()

end

end)




-- Aura Tab

local player = game.Players.LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local eatRemote = replicatedStorage.remoteInterface.interactions.eat

local foodIds = {
    Cabbage = 210,
    Banana = 367,
    Carrot = 95,
    Berry = 113,
    Egg = 272,
}

local eating = false

local Dropdown = Tabs.Aura:AddDropdown("Dropdown", {
    Title = "Pick Food",
    Values = {"Cabbage", "Banana", "Carrot", "Berry", "Egg"},
    Multi = false,
    Default = 1,
})

Dropdown:SetValue("Cabbage")

local HealToggle = Tabs.Aura:AddToggle("HealToggle", { Title = "Heal Aura", Default = false })

HealToggle:OnChanged(function()
    eating = HealToggle.Value

    if eating then
        while eating do
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health < humanoid.MaxHealth then
                local selectedFood = Dropdown.Value
                local foodId = foodIds[selectedFood]
                eatRemote:FireServer(foodId)
            end
            wait(0.2)
            if not HealToggle.Value then
                break
            end
        end
    end
end)

Dropdown:OnChanged(function(Value)
    print("")
end)

player.CharacterAdded:Connect(function()
    eating = false
    HealToggle:SetValue(false)
end)



local player = game.Players.LocalPlayer
local remote = game:GetService("ReplicatedStorage").remoteInterface.world.onFire
local fireEnabled = false

local FireToggle = Tabs.Aura:AddToggle("FireToggle", { Title = "Fire Aura", Default = false })

FireToggle:OnChanged(function()
    fireEnabled = FireToggle.Value
    print("")

    if fireEnabled then
        while fireEnabled do
            remote:FireServer()
            wait(2.6)
            if not FireToggle.Value then
                break
            end
        end
    end
end)



local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local runService = game:GetService("RunService")

local flying = false
local bodyGyro = nil
local bodyVelocity = nil

local function startFlying()
    if flying then return end
    flying = true

    humanoid.PlatformStand = true

    bodyGyro = Instance.new("BodyGyro")
    bodyVelocity = Instance.new("BodyVelocity")

    bodyGyro.MaxTorque = Vector3.new(400000, 400000, 400000)
    bodyGyro.CFrame = character.HumanoidRootPart.CFrame
    bodyGyro.P = 5000

    bodyVelocity.MaxForce = Vector3.new(400000, 400000, 400000)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = character.HumanoidRootPart
    bodyGyro.Parent = character.HumanoidRootPart

    runService.RenderStepped:Connect(function()
        if flying then
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyGyro.CFrame = character.HumanoidRootPart.CFrame
        end
    end)
end

local function stopFlying()
    if not flying then return end
    flying = false

    bodyGyro:Destroy()
    bodyVelocity:Destroy()

    humanoid.PlatformStand = false
end

local TitanToggle = Tabs.Aura:AddToggle("TitanToggle", {Title = "Titan Aura", Default = false})
TitanToggle:OnChanged(function()
    if TitanToggle.Value then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(
            player.Character.HumanoidRootPart.Position.X,
            player.Character.HumanoidRootPart.Position.Y + 12,
            player.Character.HumanoidRootPart.Position.Z
        )
        startFlying()
        AIToggle:SetValue(true)
    else
        stopFlying()
        AIToggle:SetValue(false)
    end
end)

TitanToggle:SetValue(false)


local player = game.Players.LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local remoteInterface = replicatedStorage:WaitForChild("remoteInterface")
local runService = game:GetService("RunService")
local chop = workspace.worldResources.choppable
local mineable = workspace.worldResources.mineable
local aiFolder = workspace:WaitForChild("AI_Server")

local hrp = nil
local stamina = nil
local humanoid = nil
local flying = false
local isAutoChopEnabled, isAutoMineEnabled, isAutoAIEnabled = false, false, false

local function chopObject(object)
    if object and object.PrimaryPart then
        local args = {3, object, CFrame.new(object.PrimaryPart.Position)}
        remoteInterface.interactions.chop:FireServer(unpack(args))

        local highlight = Instance.new("Highlight")
        highlight.Adornee = object
        highlight.FillColor = Color3.fromRGB(255, 0, 0)
        highlight.FillTransparency = 0.5
        highlight.Parent = object
        game.Debris:AddItem(highlight, 1)
    end
end

local function autoChop()
    local nearestObject, nearestDistance = nil, 30
    for _, folder in pairs(chop:GetChildren()) do
        if folder:IsA("Folder") then
            for _, choppableObject in pairs(folder:GetChildren()) do
                if choppableObject.PrimaryPart then
                    local distance = (hrp.Position - choppableObject.PrimaryPart.Position).Magnitude
                    if distance < nearestDistance then
                        nearestObject, nearestDistance = choppableObject, distance
                    end
                end
            end
        end
    end
    if nearestObject then
        chopObject(nearestObject)
    end
end

local function mineObject(object)
    if object and object.PrimaryPart then
        local args = {4, object, CFrame.new(object.PrimaryPart.Position)}
        remoteInterface.interactions.mine:FireServer(unpack(args))

        local highlight = Instance.new("Highlight")
        highlight.Adornee = object
        highlight.FillColor = Color3.fromRGB(255, 0, 0)
        highlight.FillTransparency = 0.5
        highlight.Parent = object
        game.Debris:AddItem(highlight, 1)
    end
end

local function autoMine()
    local nearestObject, nearestDistance = nil, 30
    for _, folder in pairs(mineable:GetChildren()) do
        if folder:IsA("Folder") then
            for _, mineableObject in pairs(folder:GetChildren()) do
                if mineableObject.PrimaryPart then
                    local distance = (hrp.Position - mineableObject.PrimaryPart.Position).Magnitude
                    if distance < nearestDistance then
                        nearestObject, nearestDistance = mineableObject, distance
                    end
                end
            end
        end
    end
    if nearestObject then
        mineObject(nearestObject)
    end
end

local function attackAI(aiObject)
    if aiObject and aiObject:FindFirstChild("HumanoidRootPart") then
        local args = {1, aiObject}
        remoteInterface.interactions.meleeAI:FireServer(unpack(args))

        local highlight = Instance.new("Highlight")
        highlight.Adornee = aiObject
        highlight.FillColor = Color3.fromRGB(255, 0, 0)
        highlight.FillTransparency = 0.5
        highlight.Parent = aiObject
        game.Debris:AddItem(highlight, 1)
    end
end

local function autoHunt()
    local nearestAI, nearestDistance = nil, 30
    for _, aiObject in pairs(aiFolder:GetChildren()) do
        if aiObject:FindFirstChild("HumanoidRootPart") then
            local distance = (hrp.Position - aiObject.HumanoidRootPart.Position).Magnitude
            if distance < nearestDistance then
                nearestAI, nearestDistance = aiObject, distance
            end
        end
    end
    if nearestAI then
        attackAI(nearestAI)
    end
end

local function updateCharacter()
    local character = player.Character or player.CharacterAdded:Wait()
    hrp = character:WaitForChild("HumanoidRootPart")
    stamina = character:WaitForChild("stamina")
    humanoid = character:WaitForChild("Humanoid")
end

player.CharacterAdded:Connect(function()
    updateCharacter()

    if isAutoChopEnabled then
        coroutine.wrap(function()
            while isAutoChopEnabled do
                autoChop()
                wait()
            end
        end)()
    end

    if isAutoMineEnabled then
        coroutine.wrap(function()
            while isAutoMineEnabled do
                autoMine()
                wait()
            end
        end)()
    end

    if isAutoAIEnabled then
        coroutine.wrap(function()
            while isAutoAIEnabled do
                autoHunt()
                wait()
            end
        end)()
    end
end)

local AutoChopToggle = Tabs.Aura:AddToggle("AutoChopToggle", {Title = "Chop Aura (Slot 3)", Default = false})
AutoChopToggle:OnChanged(function(value)
    isAutoChopEnabled = value
    if value then
        coroutine.wrap(function()
            while isAutoChopEnabled do
                autoChop()
                wait()
            end
        end)()
    end
end)

local AutoMineToggle = Tabs.Aura:AddToggle("AutoMineToggle", {Title = "Mine Aura (Slot 4)", Default = false})
AutoMineToggle:OnChanged(function(value)
    isAutoMineEnabled = value
    if value then
        coroutine.wrap(function()
            while isAutoMineEnabled do
                autoMine()
                wait()
            end
        end)()
    end
end)

local AutoAIToggle = Tabs.Aura:AddToggle("AutoAIToggle", {Title = "AI Aura (Slot 1)", Default = false})
AutoAIToggle:OnChanged(function(value)
    isAutoAIEnabled = value
    if value then
        coroutine.wrap(function()
            while isAutoAIEnabled do
                autoHunt()
                wait()
            end
        end)()
    end
end)

updateCharacter()





-- Esp Tab

local player = game.Players.LocalPlayer
local savedName = ""
local originalCameraSubject = nil

local function updateOriginalCamera()
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        originalCameraSubject = player.Character.Humanoid
    else
        originalCameraSubject = game.Workspace.CurrentCamera.CameraSubject
    end
end

player.CharacterAdded:Connect(function()
    task.wait(0.5)
    updateOriginalCamera()
end)

updateOriginalCamera()

local Input = Tabs.Esp:AddInput("Input", {
    Title = "Player Name :",
    Default = "",
    Placeholder = "                       ...",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        savedName = Value
    end
})

local Toggle = Tabs.Esp:AddToggle("SpcToggle", { 
    Title = "View Player", 
    Default = false 
})

Toggle:OnChanged(function(state)
    if state then
        if savedName == "" then
            Fluent:Notify({
                Title = "Warning",
                Content = "Please enter a player name!",
                Duration = 5
            })
            Toggle:Set(false)
            return
        end

        local targetPlayer = nil

        for _, plr in ipairs(game.Players:GetPlayers()) do
            if plr ~= player and (plr.Name:lower():sub(1, #savedName) == savedName:lower() or plr.DisplayName:lower():sub(1, #savedName) == savedName:lower()) then
                targetPlayer = plr
                break
            end
        end

        if targetPlayer then
            if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
                if targetPlayer.Character.Humanoid.Health <= 0 then
                    Fluent:Notify({
                        Title = "Error",
                        Content = "The player is dead!",
                        Duration = 5
                    })
                    Toggle:Set(false)
                    return
                end
                
                game.Workspace.CurrentCamera.CameraSubject = targetPlayer.Character.Humanoid
                Fluent:Notify({
                    Title = "Success",
                    Content = "Now viewing: " .. targetPlayer.Name,
                    Duration = 3
                })
            else
                Fluent:Notify({
                    Title = "Error",
                    Content = "Player has no character!",
                    Duration = 3
                })
                Toggle:Set(false)
            end
        else
            Fluent:Notify({
                Title = "Error",
                Content = "Player not found!",
                Duration = 5
            })
            Toggle:Set(false)
        end
    else
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            game.Workspace.CurrentCamera.CameraSubject = player.Character.Humanoid
        else
            game.Workspace.CurrentCamera.CameraSubject = originalCameraSubject
        end
    end
end)


ESP_Active = false
local TextSize = 18
local StrokeTransparency = 0.2
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local ESPObjects = {}

local function createESP(player)
    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = player.Character.HumanoidRootPart

        local billboard = Instance.new("BillboardGui")
        billboard.Adornee = rootPart
        billboard.Size = UDim2.new(0, 100, 0, 40)
        billboard.StudsOffset = Vector3.new(0, 2, 0)
        billboard.AlwaysOnTop = true
        billboard.Parent = rootPart

        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextSize = TextSize
        nameLabel.TextStrokeTransparency = StrokeTransparency
        nameLabel.TextColor3 = Color3.new(1, 1, 1)
        nameLabel.Text = player.Name
        nameLabel.Parent = billboard

        local function updateTeamColor()
            if player.Team then
                nameLabel.TextColor3 = player.TeamColor.Color
            else
                nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            end
        end

        updateTeamColor()
        player:GetPropertyChangedSignal("Team"):Connect(updateTeamColor)

        RunService.RenderStepped:Connect(function()
            if ESP_Active and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (LocalPlayer.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
                local scale = math.clamp(1 / (distance / 10), 0.5, 1.5)  -- Dinamik boyut, mesafeye bağlı
                local sizeMultiplier = math.clamp(distance / 50, 0.8, 1.5)  -- Daha net mesafe ölçekleme
                billboard.Size = UDim2.new(0, 150 * scale, 0, 50 * scale)  -- Dinamik boyut
                billboard.StudsOffset = Vector3.new(0, 3 + (distance / 30), 0)  -- Mesafeye göre daha etkili offset

            else
                billboard:Destroy()
            end
        end)

        ESPObjects[player] = billboard
    end
end

local function removeESP(player)
    if ESPObjects[player] then
        ESPObjects[player]:Destroy()
        ESPObjects[player] = nil
    end
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if ESP_Active then
            createESP(player)
        end
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    removeESP(player)
end)

local function toggleESP(state)
    ESP_Active = state
    if ESP_Active then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                createESP(player)
            end
        end
    else
        for _, player in pairs(Players:GetPlayers()) do
            removeESP(player)
        end
    end
end

local Toggle = Tabs.Esp:AddToggle("EspToggle", {Title = "Name ESP", Default = false})

Toggle:OnChanged(function(value)
    toggleESP(value)
end)


local ESP_Active = false
local TextSize = 14
local StrokeTransparency = 0
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local ESPObjects = {}

local function getArmorName(player)
    if player.Character and player.Character:FindFirstChild("Shirt") and player.Character.Shirt:FindFirstChild("UpperTorso") then
        local upperTorso = player.Character.Shirt.UpperTorso
        if upperTorso:FindFirstChild("Meshes/Obsidian_SM_Chr_Captain_Male_01.054") then
            return "Ds Armor", Color3.new(0, 0, 0)
        elseif upperTorso:FindFirstChild("Meshes/Bluesteel_SM_Chr_Captain_Male_01.042") then
            return "Bs Armor", Color3.fromRGB(160, 200, 240)
        elseif upperTorso:FindFirstChild("Meshes/Atlantis_SM_Chr_Captain_Male_01.092") then
            return "Atl Armor", Color3.fromRGB(2, 79, 104)
        elseif upperTorso:FindFirstChild("EasternBossChestColor1") or 
               upperTorso:FindFirstChild("EasternBossChestColor2") or 
               upperTorso:FindFirstChild("EasternBossChestColor3") then
            return "Samurai Armor", Color3.fromRGB(74, 0, 0)
        elseif upperTorso:FindFirstChild("Meshes/Scuba_Diver.003") then
            return "Scuba Armor", Color3.fromRGB(170, 107, 62)
        end
    end
    return "No Armor", Color3.new(1, 1, 1)
end

local function createESP(player)
    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local billboard = Instance.new("BillboardGui")
        billboard.Adornee = player.Character.HumanoidRootPart
        billboard.Size = UDim2.new(0, 150, 0, 50)
        billboard.StudsOffset = Vector3.new(0, -1, 0)
        billboard.AlwaysOnTop = true
        billboard.Parent = player.Character

        local armorLabel = Instance.new("TextLabel")
        armorLabel.Size = UDim2.new(1, 0, 1, 0)
        armorLabel.BackgroundTransparency = 1
        armorLabel.TextStrokeTransparency = StrokeTransparency
        armorLabel.Font = Enum.Font.SourceSans
        armorLabel.TextSize = TextSize
        armorLabel.TextStrokeTransparency = 0.5
        armorLabel.Text, armorLabel.TextColor3 = getArmorName(player)
        armorLabel.Parent = billboard

        local function updateArmor()
            armorLabel.Text, armorLabel.TextColor3 = getArmorName(player)
        end

        player.Character.ChildAdded:Connect(updateArmor)
        player.Character.ChildRemoved:Connect(updateArmor)

        RunService.RenderStepped:Connect(function()
            if not ESP_Active or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                billboard:Destroy()
            end
        end)

        ESPObjects[player] = billboard
    end
end

local function removeESP(player)
    if ESPObjects[player] then
        ESPObjects[player]:Destroy()
        ESPObjects[player] = nil
    end
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if ESP_Active then
            createESP(player)
        end
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    removeESP(player)
end)

local function toggleESP(state)
    ESP_Active = state
    if ESP_Active then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                createESP(player)
            end
        end
    else
        for _, player in pairs(Players:GetPlayers()) do
            removeESP(player)
        end
    end
end

local ArmorToggle = Tabs.Esp:AddToggle("ArmorESP_Toggle", {Title = "Armor Esp", Default = false})

ArmorToggle:OnChanged(function(value)
    toggleESP(value)
end)



local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Toggle = Tabs.Esp:AddToggle("HealthBarToggle", {Title = "Health Esp", Default = false })

local function createHealthBar(player)
    if player == LocalPlayer then return end

    local function onCharacterAdded(character)
        local head = character:FindFirstChild("Head")
        if not head then return end

        local billboard = Instance.new("BillboardGui")
        billboard.Size = UDim2.new(2, 0, 4, 0)
        billboard.StudsOffset = Vector3.new(2, 0, 0)
        billboard.AlwaysOnTop = true
        billboard.Adornee = head
        billboard.Parent = head
        billboard.LightInfluence = 0
        billboard.MaxDistance = math.huge

        local background = Instance.new("Frame")
        background.Size = UDim2.new(0.2, 0, 1, 0)
        background.Position = UDim2.new(0.4, 0, 0, 0)
        background.BackgroundColor3 = Color3.new(0, 0, 0)
        background.BorderSizePixel = 0
        background.Parent = billboard

        local healthBar = Instance.new("Frame")
        healthBar.Size = UDim2.new(1, 0, 1, 0)
        healthBar.Position = UDim2.new(0, 0, 0, 0)
        healthBar.BorderSizePixel = 0
        healthBar.Parent = background

        local function updateHealth()
            if not character then return end
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if not humanoid then return end

            local healthPercent = humanoid.Health / humanoid.MaxHealth
            healthBar.Size = UDim2.new(1, 0, healthPercent, 0)
            healthBar.Position = UDim2.new(0, 0, 1 - healthPercent, 0)

            if healthPercent <= 0.25 then
                healthBar.BackgroundColor3 = Color3.new(1, 0, 0)
            else
                healthBar.BackgroundColor3 = Color3.fromHSV(healthPercent * 0.3, 1, 1)
            end
        end

        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:GetPropertyChangedSignal("Health"):Connect(updateHealth)
            updateHealth()
        end

        player.CharacterRemoving:Connect(function()
            billboard:Destroy()
        end)
    end

    if player.Character then
        onCharacterAdded(player.Character)
    end

    player.CharacterAdded:Connect(onCharacterAdded)
end

local function toggleHealthBars(enabled)
    if enabled then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                createHealthBar(player)
            end
        end

        Players.PlayerAdded:Connect(function(player)
            createHealthBar(player)
        end)
    else
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local head = player.Character:FindFirstChild("Head")
                if head then
                    for _, gui in pairs(head:GetChildren()) do
                        if gui:IsA("BillboardGui") then
                            gui:Destroy()
                        end
                    end
                end
            end
        end
    end
end

Toggle:OnChanged(function(value)
    toggleHealthBars(value)
end)



local function createESP(position, text)
    local part = Instance.new("Part")
    part.Size = Vector3.new(1, 1, 1)
    part.Anchored = true
    part.CanCollide = false
    part.Position = position
    part.Transparency = 1
    part.Parent = workspace

    local BillboardGui = Instance.new("BillboardGui")
    local TextLabel = Instance.new("TextLabel")

    BillboardGui.Parent = part
    BillboardGui.AlwaysOnTop = true
    BillboardGui.Size = UDim2.new(0, 50, 0, 25)
    BillboardGui.StudsOffset = Vector3.new(0, 2, 0)

    TextLabel.Parent = BillboardGui
    TextLabel.BackgroundTransparency = 1
    TextLabel.Size = UDim2.new(0.5, 0, 0.5, 0)
    TextLabel.Text = text
    TextLabel.TextColor3 = Color3.fromRGB(255, 223, 0)
    TextLabel.TextScaled = true
    TextLabel.Font = Enum.Font.SourceSansBold
end

local positions = {
    Vector3.new(-1400.6246337890625, 19.614192962646484, -396.8758239746094),
    Vector3.new(-516.262939453125, 24.64301872253418, -1695.4317626953125),
    Vector3.new(-552.7610473632812, 23.778621673583984, -1702.5064697265625),
    Vector3.new(-507.1763916015625, 22.45990562438965, -2104.33447265625),
    Vector3.new(-527.056396484375, 23.758419036865234, -2077.894287109375),
    Vector3.new(-1450.246337890625, 34.815032958984375, -1758.6822509765625),
    Vector3.new(-1907.17333984375, 35.83132553100586, -1973.03564453125),
    Vector3.new(-1876.526611328125, 30.435924530029297, -1968.1126708984375),
    Vector3.new(-2201.88134765625, 44.9340934753418, 21.052490234375),
    Vector3.new(-2009.3316650390625, 29.921506881713867, -54.457275390625),
    Vector3.new(-2472.310546875, 28.248058319091797, 573.1316528320312),
    Vector3.new(-1904.3253173828125, 66.64764404296875, 883.819580078125),
    Vector3.new(-1460.832275390625, -96.7872085571289, 216.36834716796875),
    Vector3.new(657.4374389648438, -47.17561340332031, -1698.2939453125),
    Vector3.new(662.63232421875, -48.24200439453125, -1686.140380859375),
    Vector3.new(840.1160888671875, -297.574462890625, -337.93658447265625),
    Vector3.new(826.8851318359375, -298.73345947265625, -330.9862365722656),
    Vector3.new(845.2763061523438, -298.8135681152344, -311.4554748535156),
    Vector3.new(-24.253459930419922, -202.1232452392578, 979.8515625),
    Vector3.new(61.89606857299805, -194.32522583007812, 955.2960815429688),
    Vector3.new(1499.503173828125, -241.557373046875, 447.1434326171875),
    Vector3.new(57.06728744506836, 125.66314697265625, -1033.1336669921875),
    Vector3.new(-83.85060119628906, 124.19210052490234, -815.622802734375),
    Vector3.new(458.51470947265625, 100.49313354492188, -450.033203125),
    Vector3.new(-257.0934753417969, 48.148590087890625, 1428.722900390625),
    Vector3.new(254.77304077148438, 24.3398380279541, 821.5968017578125),
    Vector3.new(243.41091918945312, 22.327388763427734, 814.1744995117188),
    Vector3.new(254.32733154296875, 47.94569396972656, 479.680908203125),
    Vector3.new(257.3832702636719, 43.50262451171875, 461.9660949707031),
    Vector3.new(-545.1298828125, 75.49266052246094, 295.71441650390625),
    Vector3.new(-652.5350341796875, 226.5613555908203, 640.930419921875),
    Vector3.new(-662.6375122070312, 227.2249298095703, 650.5949096679688),
    Vector3.new(-749.8121337890625, 34.40940475463867, -127.40174102783203),
    Vector3.new(-743.3014526367188, 32.628746032714844, -145.69912719726562),
    Vector3.new(-906.50634765625, 124.79803466796875, -409.41400146484375),
    Vector3.new(1635.9415283203125, 24.25177001953125, -655.3259887695312),
    Vector3.new(1567.390869140625, 22.09427833557129, -935.9376831054688),
    Vector3.new(1679.0355224609375, 40.95698928833008, -908.5970458984375),
    Vector3.new(1677.8177490234375, 40.03765869140625, -921.0919799804688),
    Vector3.new(1236.37646484375, 24.563400268554688, -895.0894165039062),
    Vector3.new(1168.456298828125, 27.80534553527832, -605.278564453125),
    Vector3.new(1182.696044921875, 27.140169143676758, -599.6692504882812),
    Vector3.new(1193.0386962890625, 18.886157989501953, -574.3853149414062),
    Vector3.new(1194.0174560546875, 20.502094268798828, -555.3908081054688),
    Vector3.new(1849.173583984375, 28.175373077392578, 2451.483642578125),
    Vector3.new(1822.48095703125, 35.627845764160156, 2469.974609375),
    Vector3.new(1450.5982666015625, 34.4294319152832, 2400.645263671875),
    Vector3.new(1742.9444580078125, 105.98089599609375, 2290.16015625),
    Vector3.new(1722.467529296875, 109.18167114257812, 2284.153076171875),
    Vector3.new(1730.1649169921875, 106.54853820800781, 2267.723388671875),
    Vector3.new(1719.5994873046875, 111.58321380615234, 2257.302978515625)
}

local ToggleGoldEsp = Tabs.Esp:AddToggle("GoldEspToggle", {Title = "Gold Esp", Default = false})

ToggleGoldEsp:OnChanged(function()
    if ToggleGoldEsp.Value then
        for _, position in ipairs(positions) do
            createESP(position, "Gold")
        end
    else
        for _, part in ipairs(workspace:GetChildren()) do
            if part:IsA("Part") and part:FindFirstChild("BillboardGui") then
                part:Destroy()
            end
        end
    end
end)



local function createESP(position, text)
    local part = Instance.new("Part")
    part.Size = Vector3.new(1, 1, 1)
    part.Anchored = true
    part.CanCollide = false
    part.Position = position
    part.Transparency = 1
    part.Parent = workspace

    local BillboardGui = Instance.new("BillboardGui")
    local TextLabel = Instance.new("TextLabel")

    BillboardGui.Parent = part
    BillboardGui.AlwaysOnTop = true
    BillboardGui.Size = UDim2.new(0, 170, 0, 80)
    BillboardGui.StudsOffset = Vector3.new(0, 2, 0)

    TextLabel.Parent = BillboardGui
    TextLabel.BackgroundTransparency = 1
    TextLabel.Size = UDim2.new(0.5, 0, 0.5, 0)
    TextLabel.Text = text
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.TextScaled = true
    TextLabel.Font = Enum.Font.SourceSansBold
end

local merchants = {
    {name = "Mainland Merchant", position = Vector3.new(-131.043212890625, 25.068206787109375, 433.8000793457031)},
    {name = "Norse Merchant", position = Vector3.new(-1260.2017822265625, 25.2473201751709, -1995.818115234375)},
    {name = "Desert Merchant", position = Vector3.new(1437.39404296875, 25.262939453125, -593.8296508789062)},
    {name = "Imperial Merchant", position = Vector3.new(-174.58087158203125, 25.262939453125, -1052.1837158203125)},
    {name = "Black Market Merchant", position = Vector3.new(-1160.9072265625, 24.404111862182617, 94.88638305664062)},
    {name = "Asian Merchant", position = Vector3.new(-740.0001220703125, 331.2981262207031, 7138.98486328125)}
}

local Toggle = Tabs.Esp:AddToggle("Merchants", {Title = "Merchant Esp", Default = false})

Toggle:OnChanged(function()
    if Toggle.Value then
        for _, merchant in ipairs(merchants) do
            createESP(merchant.position, merchant.name)
        end
    else
        for _, merchant in ipairs(merchants) do
            for _, part in ipairs(workspace:GetChildren()) do
                if part:IsA("Part") and part.position == merchant.position then
                    part:Destroy()
                end
            end
        end
    end
end)





-- Auto Tab

Tabs.Gold:AddParagraph({
    Title = "Auto Tab In Paid Version",
    Content = "Auto Rebirth - Auto Gold Farm - Auto Kill Titan,Samurai,Kraken. And more in paid version!"
})




-- Settings

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
Window:SelectTab(1)

Fluent:Notify({
    Title = "CR7",
    Content = "CR7 script has been loaded.",
    Duration = 5
})

SaveManager:LoadAutoloadConfig()
